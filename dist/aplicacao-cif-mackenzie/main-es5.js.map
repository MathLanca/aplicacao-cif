{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/patient-register/patient-register.component.ts","webpack:///src/app/patient-register/patient-register.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/service/auth.service.ts","webpack:///src/app/service/cep.service.ts","webpack:///src/app/service/register.service.ts","webpack:///src/app/service/session.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","iconRegistry","sanitizer","route","sessionService","breakpointObserver","title","isHandset$","observe","Handset","pipe","result","matches","addSvgIcon","bypassSecurityTrustResourceUrl","componentReference","console","log","ngOnChanges","isLogged","islogged","greetings","setGreetigns","getUserLogged","navigate","hours","Date","getHours","localStorage","name","logoutUser","location","reload","redirectToPatientRegister","viewProfile","logout","onActivate","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","schemas","HomeComponent","LoginComponent","authService","router","snackbar","callRegisterComponent","loading","person","personOut","login","password","subscribe","res","saveUserLoggedId","firstName","emit","error","open","duration","panelClass","PatientRegisterComponent","cepService","registerService","_adapter","cepNotFound","equalPass","registered","states","Roles","genders","value","viewValue","address","personForm","createPersonForm","addressForm","createAddressForm","setLocale","searchCEP","controls","postalCode","erro","fillAddressFields","err","confirmPass","cep","setValue","logradouro","bairro","localidade","uf","email","required","minLength","maxLength","lastName","pattern","sex","telephoneNumber","birthDate","publicPlace","houseNumber","neighborhood","city","state","active","patient","therapistID","toISOString","validatePass","goBack2Login","onSubmit","RegisterComponent","register","cpf","message","myStepper","previous","resp","AuthService","http","url","personBaseUrl","headers","append","httpOptions","get","providedIn","CepService","cepBaseUrl","RegisterService","post","handleError","ErrorEvent","status","SessionService","userId","getItem","setItem","removeItem","environment","production","bootstrapModule"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,EAErB;AAAED,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KAFqB,EAGrB;AAAED,UAAI,EAAE,MAAR;AAAgBC,eAAS,EAAE;AAA3B,KAHqB,EAIrB;AAAED,UAAI,EAAE,iBAAR;AAA2BC,eAAS,EAAE;AAAtC,KAJqB,CAAvB;;QAWaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBJ,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBG,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBJ,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;AClB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACkBY;;AAAkE;AAAA;;AAAA;;AAAA;;AAAA,iBAAS,aAAT;AAAwB,SAAxB;;AAChE;;AAA4C;;AAAI;;AAClD;;;;;;AAIA;;AAAkE;;AAAe;;;;;;AAAf;;AAAA;;;;;;AAClE;;AAAqF;;AAA8B;;AAAM;;AAAW;;;;;;;;AAA1E;;;;;;;;;;;QDTzDQ,Y;AAKX,4BAAYC,YAAZ,EAA2CC,SAA3C,EAA4EC,KAA5E,EAAmGC,cAAnG,EAA2IC,kBAA3I,EAAmL;AAAA;;AAAvG,aAAAF,KAAA,GAAAA,KAAA;AAAuB,aAAAC,cAAA,GAAAA,cAAA;AAAwC,aAAAC,kBAAA,GAAAA,kBAAA;AAJ3I,aAAAC,KAAA,GAAQ,yBAAR;AAsEA,aAAAC,UAAA,GAAkC,KAAKF,kBAAL,CAAwBG,OAAxB,CAAgC,gEAAYC,OAA5C,EAC/BC,IAD+B,CAE9B,2DAAI,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAACC,OAAX;AAAA,SAAV,CAF8B,EAG9B,oEAH8B,CAAlC;AAjEEX,oBAAY,CAACY,UAAb,CACE,YADF,EAEEX,SAAS,CAACY,8BAAV,CAAyC,mCAAzC,CAFF;AAID;;;;mCACUC,kB,EAAoB;AAC7BC,iBAAO,CAACC,GAAR,CAAYF,kBAAZ;AACA,eAAKG,WAAL;AACD;;;sCAEa;AACZ,eAAKC,QAAL,GAAgB,KAAKC,QAAL,EAAhB;AACA,eAAKC,SAAL,GAAiB,KAAKC,YAAL,EAAjB;AACD;;;mCAEU;AACT,eAAKH,QAAL,GAAgB,KAAKC,QAAL,EAAhB;AACA,eAAKC,SAAL,GAAiB,KAAKC,YAAL,EAAjB;AACAN,iBAAO,CAACC,GAAR,CAAY,KAAKI,SAAjB;;AACA,cAAI,KAAKjB,cAAL,CAAoBmB,aAApB,MAAuC,IAA3C,EAAiD;AAC/C,mBAAO,KAAKpB,KAAL,CAAWqB,QAAX,CAAoB,CAAC,EAAD,CAApB,CAAP;AACD;AACF;;;mCAEU;AACT,cAAI,KAAKpB,cAAL,CAAoBmB,aAApB,MAAuC,IAA3C,EAAiD;AAC/C,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAP;AACD;;;uCAEc;AACb,eAAKE,KAAL,GAAa,IAAIC,IAAJ,GAAWC,QAAX,EAAb;AACAX,iBAAO,CAACC,GAAR,CAAY,KAAKQ,KAAjB;;AACA,cAAI,KAAKA,KAAL,IAAc,CAAd,IAAmB,KAAKA,KAAL,GAAa,EAApC,EAAwC;AACtCT,mBAAO,CAACC,GAAR,CAAY,WAAW,KAAKQ,KAA5B;AACA,mBAAO,cAAcG,YAAY,CAACC,IAA3B,GAAkC,GAAzC;AACD;;AAED,cAAI,KAAKJ,KAAL,IAAc,EAAd,IAAoB,KAAKA,KAAL,GAAa,EAArC,EAAyC;AACvCT,mBAAO,CAACC,GAAR,CAAY,aAAa,KAAKQ,KAA9B;AACA,mBAAO,gBAAgBG,YAAY,CAACC,IAA7B,GAAoC,GAA3C;AACD;;AAED,cAAI,KAAKJ,KAAL,IAAc,EAAd,IAAoB,KAAKA,KAAL,GAAa,CAArC,EAAwC;AACtCT,mBAAO,CAACC,GAAR,CAAY,aAAa,KAAKQ,KAA9B;AACA,mBAAO,gBAAgBG,YAAY,CAACC,IAA7B,GAAoC,GAA3C;AACD;;AACDb,iBAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;;sCAEa,CAEb;;;iCAEQ;AACP,eAAKb,cAAL,CAAoB0B,UAApB;AACAC,kBAAQ,CAACC,MAAT;AACA,eAAK7B,KAAL,CAAWqB,QAAX,CAAoB,CAAC,EAAD,CAApB;AACD;;;oDAE2B;AAC1B,eAAKrB,KAAL,CAAWqB,QAAX,CAAoB,CAAC,iBAAD,CAApB;AACD;;;;;;;uBArEUxB,Y,EAAY,kI,EAAA,uI,EAAA,uH,EAAA,wI,EAAA,uI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,oF;AAAA,e;AAAA,c;AAAA,w4B;AAAA;AAAA;AChBzB;;AACI;;;;;;;;AACI;;AAA0B;;AAAI;;AAC9B;;AACI;;AACI;;AAAiC;;AAAY;;AAAW;;AAAM;;AAAc;;AAAO;;AACvF;;AACI;;AAAiC;;AAAQ;;AAAW;;AAAM;;AAAqB;;AACnF;;AACA;;AAAgD;AAAA,mBAAS,IAAAiC,yBAAA,EAAT;AAAoC,WAApC;;AAC5C;;AAAiC;;AAAU;;AAAW;;AAAM;;AAAkB;;AAClF;;AACA;;AACI;;AAAiC;;AAAU;;AAAW;;AAAM;;AAAqB;;AAAO;;AAChG;;AACJ;;AACA;;AACI;;AACI;;;;AAGA;;AACA;;AAAO;;AAAa;;AACpB;;AACA;;AACA;;AACA;;AACI;;AAAsB;AAAA,mBAAS,IAAAC,WAAA,EAAT;AAAsB,WAAtB;;AAAwB;;AAAU;;AAAc;;AAAY;;AAAM;;AACxF;;AAAsB;AAAA,mBAAS,IAAAC,MAAA,EAAT;AAAiB,WAAjB;;AAAmB;;AAAU;;AAAW;;AAAY;;AAAI;;AAClF;;AACJ;;AACA;;AAAe;AAAA,mBAAY,IAAAC,UAAA,QAAZ;AAA8B,WAA9B;;AAAgC;;AACnD;;AACJ;;;;AAhCiB;;AAAA,mLAA8D,MAA9D,EAA8D,iGAA9D,EAA8D,QAA9D,EAA8D,0FAA9D;;AAAuF;;AAiBA;;AAAA;;AAMtF;;AAAA;;AACE;;AAAA;;;;;;;;;;sEDTPpC,Y,EAAY;cAPxB,uDAOwB;eAPd;AACTqC,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAOc,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhBzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAwFaC,S;;;;;YAAAA,S;AAAS,kBAHR,2DAGQ;;;;yBAATA,S;AAAS,O;AAAA,iBAPT,CACT,wEADS,EAET,qEAFS,C;AAGV,gBApCQ,CACP,uEADO,EAEP,mEAFO,EAGP,4FAHO,EAIP,oEAJO,EAKP,4DALO,EAMP,iEANO,EAOP,kEAPO,EAQP,+DARO,EASP,kEATO,EAUP,gEAVO,EAWP,+DAXO,EAYP,mEAZO,EAaP,oEAbO,EAcP,gEAdO,EAeP,iEAfO,EAgBP,gEAhBO,EAiBP,qEAjBO,EAkBP,qEAlBO,EAmBP,gEAnBO,EAoBP,kEApBO,EAqBP,gEArBO,EAsBP,oEAtBO,EAuBP,qEAvBO,EAwBP,2DAxBO,EAyBP,mEAzBO,EA0BP,sEA1BO,EA2BP,mEA3BO,EA4BP,0EA5BO,EA6BP,kEA7BO,EA8BP,+DA9BO,EA+BP,iEA/BO,CAoCR;;;;0HAIUA,S,EAAS;AAAA,uBA9ClB,2DA8CkB,EA7ClB,qEA6CkB,EA5ClB,8EA4CkB,EA3ClB,mEA2CkB,EA1ClB,sGA0CkB;AA1CM,kBAGxB,uEAHwB,EAIxB,mEAJwB,EAKxB,4FALwB,EAMxB,oEANwB,EAOxB,4DAPwB,EAQxB,iEARwB,EASxB,kEATwB,EAUxB,+DAVwB,EAWxB,kEAXwB,EAYxB,gEAZwB,EAaxB,+DAbwB,EAcxB,mEAdwB,EAexB,oEAfwB,EAgBxB,gEAhBwB,EAiBxB,iEAjBwB,EAkBxB,gEAlBwB,EAmBxB,qEAnBwB,EAoBxB,qEApBwB,EAqBxB,gEArBwB,EAsBxB,kEAtBwB,EAuBxB,gEAvBwB,EAwBxB,oEAxBwB,EAyBxB,qEAzBwB,EA0BxB,2DA1BwB,EA2BxB,mEA3BwB,EA4BxB,sEA5BwB,EA6BxB,mEA7BwB,EA8BxB,0EA9BwB,EA+BxB,kEA/BwB,EAgCxB,+DAhCwB,EAiCxB,iEAjCwB;AA0CN,O;AATN,K;;;;;sEASHA,S,EAAS;cAhDrB,sDAgDqB;eAhDZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,qEAFY,EAGZ,8EAHY,EAIZ,mEAJY,EAKZ,sGALY,CADN;AAQR1C,iBAAO,EAAE,CACP,uEADO,EAEP,mEAFO,EAGP,4FAHO,EAIP,oEAJO,EAKP,4DALO,EAMP,iEANO,EAOP,kEAPO,EAQP,+DARO,EASP,kEATO,EAUP,gEAVO,EAWP,+DAXO,EAYP,mEAZO,EAaP,oEAbO,EAcP,gEAdO,EAeP,iEAfO,EAgBP,gEAhBO,EAiBP,qEAjBO,EAkBP,qEAlBO,EAmBP,gEAnBO,EAoBP,kEApBO,EAqBP,gEArBO,EAsBP,oEAtBO,EAuBP,qEAvBO,EAwBP,2DAxBO,EAyBP,mEAzBO,EA0BP,sEA1BO,EA2BP,mEA3BO,EA4BP,0EA5BO,EA6BP,kEA7BO,EA8BP,+DA9BO,EA+BP,iEA/BO,CARD;AAyCR2C,mBAAS,EAAE,CACT,wEADS,EAET,qEAFS,CAzCH;AA6CRC,mBAAS,EAAE,CAAC,2DAAD,CA7CH;AA8CRC,iBAAO,EAAE,CAAC,oEAAD;AA9CD,S;AAgDY,Q;;;;;;;;;;;;;;;;;;ACxFtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAcaC,a;;;;;uBAAAA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACd1B;;AAAG;;AAAW;;;;;;;;sEDcDA,a,EAAa;cALzB,uDAKyB;eALf;AACTR,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;AEd1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACqBY;;AAA4H;;AAAM;;;;;;;;AAAzG;;;;;;AACzB;;;;;;;;AACA;;AAAyD;AAAA;;AAAA;;AAAA;AAAA;;AAAkD;;AAAY;;;;;;;;AAvBnI;;AACI;;AACI;;AACA;;AACI;;AAAqC;;AAAa;;AACtD;;AACA;;AACI;;AAAoC;;AAAM;;AAC9C;;AAEA;;AAA6C;AAAA;;AAAA;;AAAA;AAAA;;AACzC;;AACI;;AACI;;AAAoF;AAAA;;AAAA;;AAAA;AAAA;;AAApF;;AACJ;;AAEA;;AACI;;AAAkI;AAAA;;AAAA;;AAAA;AAAA;;AAAlI;;AACJ;;AACJ;;AAEA;;AACA;;AACA;;AACJ;;AACJ;;AACJ;;;;;;AAbwG;;AAAA;;AAI8C;;AAAA;;AAIlI;;AAAA;;AACc;;AAAA;;AACd;;AAAA;;;;QDVPO,c;AAQX,8BAAoBC,WAApB,EAAsDC,MAAtD,EAA8EC,QAA9E,EAA6G7C,cAA7G,EAA6I;AAAA;;AAAzH,aAAA2C,WAAA,GAAAA,WAAA;AAAkC,aAAAC,MAAA,GAAAA,MAAA;AAAwB,aAAAC,QAAA,GAAAA,QAAA;AAA+B,aAAA7C,cAAA,GAAAA,cAAA;AAL7G,aAAA8C,qBAAA,GAAwB,KAAxB;AACA,aAAAC,OAAA,GAAU,KAAV;AAES,aAAAC,MAAA,GAAyB,EAAzB;AACC,aAAAC,SAAA,GAAkC,IAAI,0DAAJ,EAAlC;AACsI;;;;mCAErI;AACT,cAAG,KAAKjD,cAAL,CAAoBmB,aAApB,MAAuC,IAA1C,EAA+C;AAC7C,mBAAO,KAAKyB,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,MAAD,CAArB,CAAP;AACD;AACF;;;mCAEU;AAAA;;AACT,eAAK2B,OAAL,GAAe,IAAf;AACA,eAAKJ,WAAL,CAAiBO,KAAjB,CAAuB,KAAKF,MAAL,CAAYE,KAAnC,EAA0C,KAAKF,MAAL,CAAYG,QAAtD,EACGC,SADH,CAEI,UAAAC,GAAG,EAAI;AACL,iBAAI,CAACN,OAAL,GAAe,KAAf;;AACA,iBAAI,CAAC/C,cAAL,CAAoBsD,gBAApB,CAAqCD,GAAG,CAAChE,EAAzC,EAA6CgE,GAAG,CAACE,SAAjD;;AACA3C,mBAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,iBAAI,CAACoC,SAAL,CAAeO,IAAf,CAAoB,KAAI,CAACR,MAAzB;;AACA,iBAAI,CAACJ,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,MAAD,CAArB;AACD,WARL,EAQO,UAAAqC,KAAK,EAAI;AACV,iBAAI,CAACV,OAAL,GAAe,KAAf;AACAnC,mBAAO,CAACC,GAAR,CAAY4C,KAAZ;;AACA,iBAAI,CAACZ,QAAL,CAAca,IAAd,CAAmB,2BAAnB,EAAgD,SAAhD,EAA2D;AACzDC,sBAAQ,EAAE,IAD+C;AAEzDC,wBAAU,EAAE,CAAC,gBAAD;AAF6C,aAA3D;AAID,WAfL;AAiBD;;;qCAEY;AACX,eAAKhB,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;;;;;uBAvCUsB,c,EAAc,kI,EAAA,uH,EAAA,8H,EAAA,wI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,q1C;AAAA;AAAA;ACb3B;;;;AAAK;;;;;;;;;sEDaQA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTT,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;gBAMxB;;;gBACA;;;;;;;;;;;;;;;;;;;;AEpBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;ACS8C;;;;;;AAsBtB;;AACI;;AAAiB;;AAAwB;;AAC7C;;;;;;AAKA;;AACI;;AAAiB;;AAAwB;;AAC7C;;;;;;AAUI;;AACI;;AACJ;;;;;;AAF2C;;AACvC;;AAAA;;;;;;AA4Bc;;;;;;AAItB;;AACI;;AAAiB;;AAAmB;;AACxC;;;;;;AAwBI;;AACI;;AACJ;;;;;;AAFyC;;AACrC;;AAAA;;;;;;;;AAKR;;AAAoC;AAAA;;AAAA;;AAAA;;AAAA,iBAAS,YAAT;AAAwB,SAAxB;;AAChC;;AAAU;;AAAS;;AACnB;;AACA;;AAAU;;AAAS;;AACvB;;;;;;AACA;;AACI;;AAAU;;AAAQ;;AAClB;;AACA;;AAAU;;AAAQ;;AACtB;;;;;;AACA;;;;QD7GX0B,wB;AAiBX,wCAAoBC,UAApB,EAAoDlB,MAApD,EACU5C,cADV,EACkD2C,WADlD,EAEUoB,eAFV,EAEoDlB,QAFpD,EAGUmB,QAHV,EAGsC;AAAA;;AAHlB,aAAAF,UAAA,GAAAA,UAAA;AAAgC,aAAAlB,MAAA,GAAAA,MAAA;AAC1C,aAAA5C,cAAA,GAAAA,cAAA;AAAwC,aAAA2C,WAAA,GAAAA,WAAA;AACxC,aAAAoB,eAAA,GAAAA,eAAA;AAA0C,aAAAlB,QAAA,GAAAA,QAAA;AAC1C,aAAAmB,QAAA,GAAAA,QAAA;AAlBV,aAAAC,WAAA,GAAc,KAAd;AACA,aAAAC,SAAA,GAAY,IAAZ;AACA,aAAAnB,OAAA,GAAU,KAAV;AACA,aAAAoB,UAAA,GAAa,KAAb;AAGA,aAAAC,MAAA,GAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,CAAd;AACA,aAAAC,KAAA,GAAa,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,CAAb;AAEA,aAAAC,OAAA,GAAoB,CAClB;AAAEC,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SADkB,EAElB;AAAED,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SAFkB,EAGlB;AAAED,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SAHkB,CAApB;AAgBS,aAAAxB,MAAA,GAAyB,EAAzB;AACA,aAAAyB,OAAA,GAA4B,EAA5B;AAPP,aAAKC,UAAL,GAAkB,KAAKC,gBAAL,EAAlB;AACA,aAAKC,WAAL,GAAmB,KAAKC,iBAAL,EAAnB;;AACA,aAAKb,QAAL,CAAcc,SAAd,CAAwB,IAAxB;AACD;;;;oCASW;AAAA;;AACV,eAAKhB,UAAL,CAAgBiB,SAAhB,CAA0B,KAAKH,WAAL,CAAiBI,QAAjB,CAA0BC,UAA1B,CAAqCV,KAA/D,EACGnB,SADH,CAEI,UAACC,GAAD,EAAc;AACZ,gBAAIA,GAAG,CAAC6B,IAAJ,IAAY,IAAhB,EAAsB;AACpB,oBAAI,CAACjB,WAAL,GAAmB,IAAnB;;AACA,oBAAI,CAACpB,QAAL,CAAca,IAAd,CAAmB,kCAAnB,EAAuD,SAAvD,EAAkE;AAChEC,wBAAQ,EAAE,IADsD;AAEhEC,0BAAU,EAAE,CAAC,gBAAD;AAFoD,eAAlE;AAID,aAND,MAMO;AACL,oBAAI,CAACK,WAAL,GAAmB,KAAnB;;AACA,oBAAI,CAACkB,iBAAL,CAAuB9B,GAAvB;AACD;AACF,WAbL,EAcI,UAAA+B,GAAG,EAAI;AACL,kBAAI,CAACvC,QAAL,CAAca,IAAd,CAAmB,kCAAnB,EAAuD,SAAvD,EAAkE;AAChEC,sBAAQ,EAAE,IADsD;AAEhEC,wBAAU,EAAE,CAAC,gBAAD;AAFoD,aAAlE;AAID,WAnBL;AAqBD;;;uCAEc;AACb,eAAKM,SAAL,GAAiB,KAAKQ,UAAL,CAAgBH,KAAhB,CAAsBpB,QAAtB,KAAmC,KAAKuB,UAAL,CAAgBH,KAAhB,CAAsBc,WAA1E;AACD;;;0CAEiBC,G,EAAU;AAC1B,eAAKV,WAAL,CAAiBI,QAAjB,CAA0B,aAA1B,EAAyCO,QAAzC,CAAkDD,GAAG,CAACE,UAAtD;AACA,eAAKZ,WAAL,CAAiBI,QAAjB,CAA0B,cAA1B,EAA0CO,QAA1C,CAAmDD,GAAG,CAACG,MAAvD;AACA,eAAKb,WAAL,CAAiBI,QAAjB,CAA0B,MAA1B,EAAkCO,QAAlC,CAA2CD,GAAG,CAACI,UAA/C;AACA,eAAKd,WAAL,CAAiBI,QAAjB,CAA0B,OAA1B,EAAmCO,QAAnC,CAA4CD,GAAG,CAACK,EAAhD;AACD;;;2CAEkB;AACjB,iBAAO,IAAI,wDAAJ,CAAc;AACnB,qBAAS,IAAI,0DAAJ,CAAgB,KAAK3C,MAAL,CAAY4C,KAA5B,EAAmC,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAnC,CADU;AAEnB,wBAAY,IAAI,0DAAJ,CAAgB,KAAK5C,MAAL,CAAYG,QAA5B,EAAsC,CAAC,0DAAW0C,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAtC,CAFO;AAGnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYG,QAA5B,EAAsC,CAAC,0DAAW0C,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAtC,CAHI;AAInB,yBAAa,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYO,SAA5B,EAAuC,CAAC,0DAAWsC,QAAZ,CAAvC,CAJM;AAKnB,wBAAY,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYgD,QAA5B,EAAsC,CAAC,0DAAWH,QAAZ,CAAtC,CALO;AAMnB,mBAAO,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYgD,QAA5B,EAAsC,CAAC,0DAAWH,QAAZ,EAAsB,0DAAWI,OAAX,CAAmB,2CAAnB,CAAtB,CAAtC,CANY;AAOnB,mBAAO,IAAI,0DAAJ,CAAgB,KAAKjD,MAAL,CAAYkD,GAA5B,EAAiC,CAAC,0DAAWL,QAAZ,CAAjC,CAPY;AAQnB,+BAAmB,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYmD,eAA5B,EAA6C,CAAC,0DAAWN,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAA7C,CARA;AASnB,yBAAa,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYoD,SAA5B,EAAuC,CAAC,0DAAWP,QAAZ,CAAvC;AATM,WAAd,CAAP;AAWD;;;4CAEmB;AAClB,iBAAO,IAAI,wDAAJ,CAAc;AACnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa4B,WAA7B,EAA0C,CAAC,0DAAWR,QAAZ,CAA1C,CADI;AAEnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa6B,WAA7B,EAA0C,CAAC,0DAAWT,QAAZ,CAA1C,CAFI;AAGnB,4BAAgB,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa8B,YAA7B,EAA2C,CAAC,0DAAWV,QAAZ,CAA3C,CAHG;AAInB,oBAAQ,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa+B,IAA7B,EAAmC,CAAC,0DAAWX,QAAZ,CAAnC,CAJW;AAKnB,qBAAS,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAagC,KAA7B,EAAoC,CAAC,0DAAWZ,QAAZ,CAApC,CALU;AAMnB,0BAAc,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAaQ,UAA7B,EAAyC,CAAC,0DAAWY,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAzC;AANK,WAAd,CAAP;AAQD;;;mCAEU,CAEV;;;uCAEW;AACV,eAAKnD,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,EAAD,CAArB;AACD;;;mCAEU;AACT,eAAK4B,MAAL,GAAc,KAAK0B,UAAL,CAAgBH,KAA9B;AACA,eAAKE,OAAL,GAAe,KAAKG,WAAL,CAAiBL,KAAhC;AACA,eAAKvB,MAAL,CAAYyB,OAAZ,GAAsB,KAAKA,OAA3B;AACA,eAAKzB,MAAL,CAAY0D,MAAZ,GAAqB,IAArB;AACA,eAAK1D,MAAL,CAAY2D,OAAZ,CAAoBC,WAApB,GAAkC,KAAK5G,cAAL,CAAoBmB,aAApB,EAAlC;AACA,eAAK6B,MAAL,CAAYoD,SAAZ,GAAwB,IAAI9E,IAAJ,CAAS,KAAK0B,MAAL,CAAYoD,SAArB,EAAgCS,WAAhC,EAAxB,CANS,CAOT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;;;;;;uBAtIQhD,wB,EAAwB,gI,EAAA,uH,EAAA,wI,EAAA,kI,EAAA,0I,EAAA,8H,EAAA,8H;AAAA,K;;;YAAxBA,wB;AAAwB,2C;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AChBrC;;AACI;;AACI;;AACI;;AAAgB;;AAAoB;;AACxC;;AAEA;;AACI;;AACI;;AACI;;AACA;;AACI;;AAAW;;AAAI;;AACf;;AACJ;;AACA;;AACI;;AAAW;;AAAS;;AACpB;;AACJ;;AAEA;;AACI;;AAAW;;AAAG;;AACd;;AACJ;;AACA;;AACI;;AAAW;;AAAK;;AAChB;;AACJ;;AAEA;;AACI;;AAAW;;AAAK;;AAChB;;AACA;;AAGJ;;AACA;;AACI;;AAAW;;AAAe;;AAC1B;;AAAoC;AAAA,mBAAU,IAAAiD,YAAA,EAAV;AAAwB,WAAxB;;AAApC;;AACA;;AAGJ;;AAEA;;AACI;;AAAW;;AAAO;;AAClB;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACI;;AAGJ;;AACJ;;AAEA;;AACI;;AAAW;;AAAkB;;AAC7B;;AACA;;AACA;;AACJ;;AACA;;AACI;;AAA8B;AAAA,mBAAS,IAAAC,YAAA,EAAT;AAAuB,WAAvB;;AAC1B;;AAAU;;AAAqB;;AAC/B;;AACA;;AAAU;;AAAqB;;AACnC;;AACA;;AACA;;AACI;;AAAU;;AAAY;;AACtB;;AACA;;AAAU;;AAAY;;AAC1B;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAAgC;AAAA,mBAAY,IAAAC,QAAA,EAAZ;AAAsB,WAAtB;;AAC5B;;AACA;;AACI;;AAAW;;AAAG;;AACd;;AAAkC;AAAA,mBAAU,IAAAjC,SAAA,EAAV;AAAqB,WAArB;;AAAlC;;AACA;;AAGJ;;AAEA;;AACI;;AAAW;;AAAG;;AACd;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AACI;;AAGJ;;AACJ;;AACA;;AACI;;AAKA;;AAKA;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AA5HsB;;AAAA;;AACA;;AAAA;;AAuBO;;AAAA;;AAOA;;AAAA;;AAYW;;AAAA;;AAQA;;AAAA;;AACiB;;AAAA;;AAkBnC;;AAAA;;AACA;;AAAA;;AAKO;;AAAA;;AA0BW;;AAAA;;AAMR;;AAAA;;AAKA;;AAAA;;AAKc;;AAAA;;;;;;;;;sED7GjClB,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACT5B,kBAAQ,EAAE,sBADD;AAETC,qBAAW,EAAE,mCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAK0B,Q;;;;;;;;;;;;;;;;;;gBA2BlC;;;gBACA;;;gBACA,uD;iBAAU,K;;;gBACV,uD;iBAAU,O;;;gBACV,uD;iBAAU,S;;;;;;;;;;;;;;;;;;;;AE/Cb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;ACS8C;;;;;;AAsBtB;;AACI;;AAAiB;;AAAwB;;AAC7C;;;;;;AAKA;;AACI;;AAAiB;;AAAwB;;AAC7C;;;;;;AAUI;;AACI;;AACJ;;;;;;AAF2C;;AACvC;;AAAA;;;;;;AA4Bc;;;;;;AAItB;;AACI;;AAAiB;;AAAmB;;AACxC;;;;;;AAwBI;;AACI;;AACJ;;;;;;AAFyC;;AACrC;;AAAA;;;;;;;;AAKR;;AAAoC;AAAA;;AAAA;;AAAA;;AAAA,iBAAS,YAAT;AAAwB,SAAxB;;AAChC;;AAAU;;AAAS;;AACnB;;AACA;;AAAU;;AAAS;;AACvB;;;;;;AACA;;AACI;;AAAU;;AAAQ;;AAClB;;AACA;;AAAU;;AAAQ;;AACtB;;;;;;AACA;;;;QD3GX8E,iB;AAiBX,iCAAoBnD,UAApB,EAAoDlB,MAApD,EACU5C,cADV,EACkD2C,WADlD,EAEUoB,eAFV,EAEoDlB,QAFpD,EAGUmB,QAHV,EAGsC;AAAA;;AAHlB,aAAAF,UAAA,GAAAA,UAAA;AAAgC,aAAAlB,MAAA,GAAAA,MAAA;AAC1C,aAAA5C,cAAA,GAAAA,cAAA;AAAwC,aAAA2C,WAAA,GAAAA,WAAA;AACxC,aAAAoB,eAAA,GAAAA,eAAA;AAA0C,aAAAlB,QAAA,GAAAA,QAAA;AAC1C,aAAAmB,QAAA,GAAAA,QAAA;AAlBV,aAAAC,WAAA,GAAc,KAAd;AACA,aAAAC,SAAA,GAAY,IAAZ;AACA,aAAAnB,OAAA,GAAU,KAAV;AACA,aAAAoB,UAAA,GAAa,KAAb;AAGA,aAAAC,MAAA,GAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,EAAiG,IAAjG,EAAuG,IAAvG,EAA6G,IAA7G,EAAmH,IAAnH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqI,IAArI,EAA2I,IAA3I,EAAiJ,IAAjJ,EAAuJ,IAAvJ,CAAd;AACA,aAAAC,KAAA,GAAa,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,CAAb;AAEA,aAAAC,OAAA,GAAoB,CAClB;AAAEC,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SADkB,EAElB;AAAED,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SAFkB,EAGlB;AAAED,eAAK,EAAE,GAAT;AAAcC,mBAAS,EAAE;AAAzB,SAHkB,CAApB;AAgBS,aAAAxB,MAAA,GAAyB,EAAzB;AACA,aAAAyB,OAAA,GAA4B,EAA5B;AAPP,aAAKC,UAAL,GAAkB,KAAKC,gBAAL,EAAlB;AACA,aAAKC,WAAL,GAAmB,KAAKC,iBAAL,EAAnB;;AACA,aAAKb,QAAL,CAAcc,SAAd,CAAwB,IAAxB;AACD;;;;oCASW;AAAA;;AACV,eAAKhB,UAAL,CAAgBiB,SAAhB,CAA0B,KAAKH,WAAL,CAAiBI,QAAjB,CAA0BC,UAA1B,CAAqCV,KAA/D,EACGnB,SADH,CAEI,UAACC,GAAD,EAAc;AACZ,gBAAIA,GAAG,CAAC6B,IAAJ,IAAY,IAAhB,EAAsB;AACpB,oBAAI,CAACjB,WAAL,GAAmB,IAAnB;;AACA,oBAAI,CAACpB,QAAL,CAAca,IAAd,CAAmB,kCAAnB,EAAuD,SAAvD,EAAkE;AAChEC,wBAAQ,EAAE,IADsD;AAEhEC,0BAAU,EAAE,CAAC,gBAAD;AAFoD,eAAlE;AAID,aAND,MAMO;AACL,oBAAI,CAACK,WAAL,GAAmB,KAAnB;;AACA,oBAAI,CAACkB,iBAAL,CAAuB9B,GAAvB;AACD;AACF,WAbL,EAcI,UAAA+B,GAAG,EAAI;AACL,kBAAI,CAACvC,QAAL,CAAca,IAAd,CAAmB,kCAAnB,EAAuD,SAAvD,EAAkE;AAChEC,sBAAQ,EAAE,IADsD;AAEhEC,wBAAU,EAAE,CAAC,gBAAD;AAFoD,aAAlE;AAID,WAnBL;AAqBD;;;uCAEc;AACb,eAAKM,SAAL,GAAiB,KAAKQ,UAAL,CAAgBH,KAAhB,CAAsBpB,QAAtB,KAAmC,KAAKuB,UAAL,CAAgBH,KAAhB,CAAsBc,WAA1E;AACD;;;0CAEiBC,G,EAAU;AAC1B,eAAKV,WAAL,CAAiBI,QAAjB,CAA0B,aAA1B,EAAyCO,QAAzC,CAAkDD,GAAG,CAACE,UAAtD;AACA,eAAKZ,WAAL,CAAiBI,QAAjB,CAA0B,cAA1B,EAA0CO,QAA1C,CAAmDD,GAAG,CAACG,MAAvD;AACA,eAAKb,WAAL,CAAiBI,QAAjB,CAA0B,MAA1B,EAAkCO,QAAlC,CAA2CD,GAAG,CAACI,UAA/C;AACA,eAAKd,WAAL,CAAiBI,QAAjB,CAA0B,OAA1B,EAAmCO,QAAnC,CAA4CD,GAAG,CAACK,EAAhD;AACD;;;2CAEkB;AACjB,iBAAO,IAAI,wDAAJ,CAAc;AACnB,qBAAS,IAAI,0DAAJ,CAAgB,KAAK3C,MAAL,CAAY4C,KAA5B,EAAmC,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAnC,CADU;AAEnB,wBAAY,IAAI,0DAAJ,CAAgB,KAAK5C,MAAL,CAAYG,QAA5B,EAAsC,CAAC,0DAAW0C,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAtC,CAFO;AAGnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYG,QAA5B,EAAsC,CAAC,0DAAW0C,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAtC,CAHI;AAInB,yBAAa,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYO,SAA5B,EAAuC,CAAC,0DAAWsC,QAAZ,CAAvC,CAJM;AAKnB,wBAAY,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYgD,QAA5B,EAAsC,CAAC,0DAAWH,QAAZ,CAAtC,CALO;AAMnB,mBAAO,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYgD,QAA5B,EAAsC,CAAC,0DAAWH,QAAZ,EAAsB,0DAAWI,OAAX,CAAmB,2CAAnB,CAAtB,CAAtC,CANY;AAOnB,mBAAO,IAAI,0DAAJ,CAAgB,KAAKjD,MAAL,CAAYkD,GAA5B,EAAiC,CAAC,0DAAWL,QAAZ,CAAjC,CAPY;AAQnB,+BAAmB,IAAI,0DAAJ,CAAgB,KAAK7C,MAAL,CAAYmD,eAA5B,EAA6C,CAAC,0DAAWN,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAA7C,CARA;AASnB,yBAAa,IAAI,0DAAJ,CAAgB,KAAK/C,MAAL,CAAYoD,SAA5B,EAAuC,CAAC,0DAAWP,QAAZ,CAAvC;AATM,WAAd,CAAP;AAWD;;;4CAEmB;AAClB,iBAAO,IAAI,wDAAJ,CAAc;AACnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa4B,WAA7B,EAA0C,CAAC,0DAAWR,QAAZ,CAA1C,CADI;AAEnB,2BAAe,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa6B,WAA7B,EAA0C,CAAC,0DAAWT,QAAZ,CAA1C,CAFI;AAGnB,4BAAgB,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa8B,YAA7B,EAA2C,CAAC,0DAAWV,QAAZ,CAA3C,CAHG;AAInB,oBAAQ,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAa+B,IAA7B,EAAmC,CAAC,0DAAWX,QAAZ,CAAnC,CAJW;AAKnB,qBAAS,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAagC,KAA7B,EAAoC,CAAC,0DAAWZ,QAAZ,CAApC,CALU;AAMnB,0BAAc,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAaQ,UAA7B,EAAyC,CAAC,0DAAWY,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWC,SAAX,CAAqB,CAArB,CAA/C,CAAzC;AANK,WAAd,CAAP;AAQD;;;mCAEU;AACTnF,iBAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,cAAG,KAAKb,cAAL,CAAoBmB,aAApB,MAAuC,IAA1C,EAA+C;AAC7C,mBAAO,KAAKyB,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,MAAD,CAArB,CAAP;AACD;AACF;;;uCAEW;AACV,eAAKwB,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,EAAD,CAArB;AACD;;;mCAEU;AAAA;;AACT,eAAK4B,MAAL,GAAc,KAAK0B,UAAL,CAAgBH,KAA9B;AACA,eAAKE,OAAL,GAAe,KAAKG,WAAL,CAAiBL,KAAhC;AACA,eAAKvB,MAAL,CAAYyB,OAAZ,GAAsB,KAAKA,OAA3B;AACA,eAAKzB,MAAL,CAAY0D,MAAZ,GAAqB,IAArB;AACA,eAAK1D,MAAL,CAAYoD,SAAZ,GAAwB,IAAI9E,IAAJ,CAAS,KAAK0B,MAAL,CAAYoD,SAArB,EAAgCS,WAAhC,EAAxB;AACA,eAAK9C,eAAL,CAAqBmD,QAArB,CAA8B,KAAKlE,MAAnC,EACGI,SADH,CAEI,UAACC,GAAD,EAAc;AACZ,kBAAI,CAACR,QAAL,CAAca,IAAd,CAAmB,iCAAnB,EAAsD,QAAtD,EAAgE;AAC9DC,sBAAQ,EAAE,IADoD;AAE9DC,wBAAU,EAAE,CAAC,gBAAD;AAFkD,aAAhE;;AAIA,kBAAI,CAACV,KAAL,CAAW,MAAI,CAACF,MAAL,CAAYmE,GAAvB,EAA4B,MAAI,CAACnE,MAAL,CAAYG,QAAxC;AACD,WARL,EASI,UAAC+B,IAAD,EAAe;AACbtE,mBAAO,CAACC,GAAR,CAAYqE,IAAZ;;AACA,gBAAGA,IAAI,CAACkC,OAAL,KAAiB,0BAApB,EAA+C;AAC7C,oBAAI,CAACC,SAAL,CAAeC,QAAf;;AACA,oBAAI,CAACzE,QAAL,CAAca,IAAd,CAAmB,sBAAnB,EAA2C,SAA3C,EAAsD;AACpDC,wBAAQ,EAAE,IAD0C;AAEpDC,0BAAU,EAAE,CAAC,cAAD;AAFwC,eAAtD;AAID;;AACD,gBAAGsB,IAAI,CAACkC,OAAL,KAAiB,wBAApB,EAA6C;AAC3C,oBAAI,CAACC,SAAL,CAAeC,QAAf;;AACA,oBAAI,CAACzE,QAAL,CAAca,IAAd,CAAmB,oBAAnB,EAAyC,SAAzC,EAAoD;AAClDC,wBAAQ,EAAE,IADwC;AAElDC,0BAAU,EAAE,CAAC,cAAD;AAFsC,eAApD;AAID;AACF,WAzBL;AA2BC;;;8BAEWV,M,EAAcC,Q,EAAe;AAAA;;AACzCvC,iBAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAK8B,WAAL,CAAiBO,KAAjB,CAAuBA,MAAvB,EAA8BC,QAA9B,EACGC,SADH,CAEI,UAAAmE,IAAI,EAAI;AACN,kBAAI,CAACxE,OAAL,GAAe,KAAf;;AACA,kBAAI,CAAC/C,cAAL,CAAoBsD,gBAApB,CAAqCiE,IAAI,CAAClI,EAA1C;;AACAuB,mBAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,kBAAI,CAAC+B,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,MAAD,CAArB;AACD,WAPL,EAOO,UAAAqC,KAAK,EAAI;AACV,kBAAI,CAACV,OAAL,GAAe,KAAf;AACAnC,mBAAO,CAACC,GAAR,CAAY4C,KAAZ;;AACA,kBAAI,CAACZ,QAAL,CAAca,IAAd,CAAmB,mCAAnB,EAAwD,SAAxD,EAAmE;AACjEC,sBAAQ,EAAE,IADuD;AAEjEC,wBAAU,EAAE,CAAC,cAAD;AAFqD,aAAnE;;AAIA,kBAAI,CAAChB,MAAL,CAAYxB,QAAZ,CAAqB,CAAC,EAAD,CAArB;AACD,WAfL;AAiBD;;;;;;;uBA9JU6F,iB,EAAiB,gI,EAAA,uH,EAAA,wI,EAAA,kI,EAAA,0I,EAAA,8H,EAAA,mI;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AClB9B;;AACI;;AACI;;AACI;;AAAgB;;AAAsB;;AAC1C;;AAEA;;AACI;;AACI;;AACI;;AACA;;AACI;;AAAW;;AAAI;;AACf;;AACJ;;AACA;;AACI;;AAAW;;AAAS;;AACpB;;AACJ;;AAEA;;AACI;;AAAW;;AAAG;;AACd;;AACJ;;AACA;;AACI;;AAAW;;AAAK;;AAChB;;AACJ;;AAEA;;AACI;;AAAW;;AAAK;;AAChB;;AACA;;AAGJ;;AACA;;AACI;;AAAW;;AAAe;;AAC1B;;AAAoC;AAAA,mBAAU,IAAAH,YAAA,EAAV;AAAwB,WAAxB;;AAApC;;AACA;;AAGJ;;AAEA;;AACI;;AAAW;;AAAO;;AAClB;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACI;;AAGJ;;AACJ;;AAEA;;AACI;;AAAW;;AAAkB;;AAC7B;;AACA;;AACA;;AACJ;;AACA;;AACI;;AAA8B;AAAA,mBAAS,IAAAC,YAAA,EAAT;AAAuB,WAAvB;;AAC1B;;AAAU;;AAAqB;;AAC/B;;AACA;;AAAU;;AAAqB;;AACnC;;AACA;;AACA;;AACI;;AAAU;;AAAY;;AACtB;;AACA;;AAAU;;AAAY;;AAC1B;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAAgC;AAAA,mBAAY,IAAAC,QAAA,EAAZ;AAAsB,WAAtB;;AAC5B;;AACA;;AACI;;AAAW;;AAAG;;AACd;;AAAkC;AAAA,mBAAU,IAAAjC,SAAA,EAAV;AAAqB,WAArB;;AAAlC;;AACA;;AAGJ;;AAEA;;AACI;;AAAW;;AAAG;;AACd;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AACA;;AACI;;AAAW;;AAAM;;AACjB;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AACI;;AAGJ;;AACJ;;AACA;;AACI;;AAKA;;AAKA;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AA5HsB;;AAAA;;AACA;;AAAA;;AAuBO;;AAAA;;AAOA;;AAAA;;AAYW;;AAAA;;AAQA;;AAAA;;AACiB;;AAAA;;AAkBnC;;AAAA;;AACA;;AAAA;;AAKO;;AAAA;;AA0BW;;AAAA;;AAMR;;AAAA;;AAKA;;AAAA;;AAKc;;AAAA;;;;;;;;;sED3GjCkC,iB,EAAiB;cAN7B,uDAM6B;eANnB;AACThF,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAMmB,Q;;;;;;;;;;;;;;;;;;gBA2B3B;;;gBACA;;;gBACA,uD;iBAAU,K;;;gBACV,uD;iBAAU,O;;;gBACV,uD;iBAAU,S;;;;;;;;;;;;;;;;;;;;AEjDb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaqF,W;AAEX,2BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;8BAEnCvE,O,EAAeC,Q,EAAkB;AACrC,cAAMuE,GAAG,aAAM,sEAAYC,aAAlB,qBAAT;AAEA,cAAIC,OAAO,GAAG,IAAI,gEAAJ,EAAd;AACAA,iBAAO,CAACC,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AAEA,cAAMC,WAAW,GAAG;AAClBF,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAiB,kBADM;AAEvB,+BAAiB,eAFM;AAGvB,2BAAa1E,OAHU;AAIvB,0BAAYC;AAJW,aAAhB;AADS,WAApB;AAQA,iBAAO,KAAKsE,IAAL,CAAUM,GAAV,CAAsBL,GAAtB,EAA2BI,WAA3B,CAAP;AACD;;;;;;;uBAnBUN,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAHV;;;;;sEAGDA,W,EAAW;cAJvB,wDAIuB;eAJZ;AACVQ,oBAAU,EAAE;AADF,S;AAIY,Q;;;;;;;;;;;;;;;;;;;;;;ACVxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,U;AAEX,0BAAoBR,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;kCAE/BnC,G,EAAU;AAClB,cAAMoC,GAAG,aAAM,sEAAYQ,UAAlB,iBAAmC5C,GAAnC,WAAT;AACA,iBAAO,KAAKmC,IAAL,CAAUM,GAAV,CAAcL,GAAd,CAAP;AACD;;;;;;;uBAPUO,U,EAAU,uH;AAAA,K;;;aAAVA,U;AAAU,eAAVA,UAAU,K;AAAA,kBAFT;;;;;sEAEDA,U,EAAU;cAHtB,wDAGsB;eAHX;AACVD,oBAAU,EAAE;AADF,S;AAGW,Q;;;;;;;;;;;;;;;;;;;;;;ACPvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaG,e;AAEX,+BAAoBV,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;iCAEhCzE,M,EAAc;AACrB,cAAM0E,GAAG,aAAM,sEAAYC,aAAlB,wBAAT;AACA,iBAAO,KAAKF,IAAL,CAAUW,IAAV,CAAuBV,GAAvB,EAA2B1E,MAA3B,EACN1C,IADM,CAEL,kEAAW,KAAK+H,WAAhB,CAFK,CAAP;AAID;;;oCAEmB5E,K,EAA0B;AAC5C,cAAIA,KAAK,CAACA,KAAN,YAAuB6E,UAA3B,EAAuC;AACrC;AACA1H,mBAAO,CAAC6C,KAAR,CAAc,oBAAd,EAAoCA,KAAK,CAACA,KAAN,CAAY2D,OAAhD;AACD,WAHD,MAGO;AACL;AACA;AACAxG,mBAAO,CAAC6C,KAAR,CACE,gCAAyBA,KAAK,CAAC8E,MAA/B,8BACa9E,KAAK,CAACA,KADnB,CADF;AAGD,WAV2C,CAW5C;;;AACA,iBAAO,wDAAW;AAChB8E,kBAAM,EAAE9E,KAAK,CAAC8E,MADE;AAEhBnB,mBAAO,EAAE3D,KAAK,CAACA;AAFC,WAAX,CAAP;AAID;;;;;;;uBA5BU0E,e,EAAe,uH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVH,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;ACV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAIaQ,c;AAIX,8BAAoBzI,KAApB,EAAmC;AAAA;;AAAf,aAAAA,KAAA,GAAAA,KAAA;AAAkB;;;;wCAEtB;AACd,cAAM0I,MAAM,GAAGjH,YAAY,CAACkH,OAAb,CAAqB,MAArB,CAAf;;AACA,cAAI,CAAC,KAAKD,MAAV,EAAkB;AAChB,iBAAKA,MAAL,GAAcA,MAAd;AACD;;AACD,iBAAO,KAAKA,MAAZ;AACD;;;yCAEgBA,M,EAAgBhH,I,EAAe;AAC9CD,sBAAY,CAACmH,OAAb,CAAqB,MAArB,EAA6BF,MAA7B;;AACA,cAAGhH,IAAI,IAAI,IAAX,EAAgB;AACd,iBAAKA,IAAL,GAAYA,IAAZ;AACAD,wBAAY,CAACmH,OAAb,CAAqB,MAArB,EAA6BlH,IAA7B;AACD;;AACD,eAAKgH,MAAL,GAAcA,MAAd;AACD;;;qCAEY;AACXjH,sBAAY,CAACoH,UAAb,CAAwB,MAAxB;AACApH,sBAAY,CAACoH,UAAb,CAAwB,MAAxB;AACA,eAAKH,MAAL,GAAc,EAAd;AACA,eAAKhH,IAAL,GAAY,EAAZ;AACA,eAAK1B,KAAL,CAAWqB,QAAX,CAAoB,CAAC,EAAD,CAApB;AACD;;;;;;;uBA7BUoH,c,EAAc,8G;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc;;;;;sEAAdA,c,EAAc;cAD1B;AAC0B,Q;;;;;;;;;;;;;;;;;;;;;;ACJ3B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMK,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzBnB,mBAAa,EAAE,2CAFU;AAGzBO,gBAAU,EAAE;AAHa,KAApB;AAMP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACjBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAI,sEAAYY,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAA3D,GAAG;AAAA,aAAIxE,OAAO,CAAC6C,KAAR,CAAc2B,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { PatientRegisterComponent } from './patient-register/patient-register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginComponent},\r\n  { path: 'register', component: RegisterComponent},\r\n  { path: 'home', component: HomeComponent},\r\n  { path: 'patientRegister', component: PatientRegisterComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnChanges, Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { SessionService } from './service/session.service';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n\r\n})\r\n\r\nexport class AppComponent implements OnChanges {\r\n  title = 'aplicacao-cif-mackenzie';\r\n  public greetings: string;\r\n  private hours: number;\r\n  public isLogged: boolean;\r\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer, private route: Router, private sessionService: SessionService, private breakpointObserver: BreakpointObserver) {\r\n    iconRegistry.addSvgIcon(\r\n      'mack_white',\r\n      sanitizer.bypassSecurityTrustResourceUrl('../../assets/icons/mack_white.svg')\r\n    );\r\n  }\r\n  onActivate(componentReference) {\r\n    console.log(componentReference)\r\n    this.ngOnChanges();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.isLogged = this.islogged();\r\n    this.greetings = this.setGreetigns();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLogged = this.islogged();\r\n    this.greetings = this.setGreetigns();\r\n    console.log(this.greetings);\r\n    if (this.sessionService.getUserLogged() == null) {\r\n      return this.route.navigate(['']);\r\n    }\r\n  }\r\n\r\n  islogged() {\r\n    if (this.sessionService.getUserLogged() != null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setGreetigns() {\r\n    this.hours = new Date().getHours();\r\n    console.log(this.hours);\r\n    if (this.hours >= 3 && this.hours < 12) {\r\n      console.log('Dia.. ' + this.hours);\r\n      return \"Bom Dia, \" + localStorage.name + \"!\";\r\n    }\r\n\r\n    if (this.hours >= 12 && this.hours < 18) {\r\n      console.log('Tarde.. ' + this.hours);\r\n      return \"Boa Tarde, \" + localStorage.name + \"!\";\r\n    }\r\n\r\n    if (this.hours >= 18 || this.hours < 3) {\r\n      console.log('Notie.. ' + this.hours);\r\n      return \"Boa Notie, \" + localStorage.name + \"!\";\r\n    }\r\n    console.log('nao caiu em nada')\r\n  }\r\n\r\n  viewProfile() {\r\n\r\n  }\r\n\r\n  logout() {\r\n    this.sessionService.logoutUser();\r\n    location.reload();\r\n    this.route.navigate(['']);\r\n  }\r\n\r\n  redirectToPatientRegister() {\r\n    this.route.navigate(['patientRegister']);\r\n  }\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n}","<mat-sidenav-container class=\"sidenav-container\">\r\n    <mat-sidenav [ngClass]=\"{'hidden-sidenav': !isLogged, 'sidenav': islogged}\" #drawer fixedInViewport [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\" [mode]=\"(isHandset$ | async) ? 'over' : 'side'\" [opened]=\"(isHandset$ | async) === false\">\r\n        <mat-toolbar color=\"warn\">Menu</mat-toolbar>\r\n        <mat-nav-list class=\"list-menu-side\">\r\n            <mat-button class=\"btn-side-menu\" mat-list-item>\r\n                <mat-icon class=\"icon-side-menu\">add_to_queue</mat-icon><span>Nova Avaliação</span></mat-button>\r\n            <mat-button class=\"btn-side-menu\" mat-list-item>\r\n                <mat-icon class=\"icon-side-menu\">list_alt</mat-icon><span>Avaliações Anteriores</span>\r\n            </mat-button>\r\n            <mat-button class=\"btn-side-menu\" mat-list-item (click)=\"redirectToPatientRegister()\">\r\n                <mat-icon class=\"icon-side-menu\">person_add</mat-icon><span>Cadastrar Paciente</span>\r\n            </mat-button>\r\n            <mat-button class=\"btn-side-menu\" mat-list-item>\r\n                <mat-icon class=\"icon-side-menu\">people_alt</mat-icon><span>Pacientes Cadastrados</span></mat-button>\r\n        </mat-nav-list>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n        <mat-toolbar class=\"header-toolbar\" color=\"warn\">\r\n            <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\" *ngIf=\"isHandset$ | async\">\r\n              <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n            </button>\r\n            <mat-icon class=\"mack-white-icon\" svgIcon=\"mack_white\"></mat-icon>\r\n            <span> Aplicação CIF</span>\r\n            <span class=\"spacer\"></span>\r\n            <span *ngIf=\"greetings != null && isLogged\" class=\"greeting-span\">{{ greetings }}</span>\r\n            <button *ngIf=\"isLogged\" mat-button class=\"menu-greeting\" [matMenuTriggerFor]=\"menu\"><mat-icon class=\"person-icon\">person</mat-icon></button>\r\n            <mat-menu #menu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"viewProfile()\"><mat-icon>person_outline</mat-icon> Perfil</button>\r\n                <button mat-menu-item (click)=\"logout()\"><mat-icon>exit_to_app</mat-icon> Sair</button>\r\n            </mat-menu>\r\n        </mat-toolbar>\r\n        <router-outlet (activate)=\"onActivate($event)\"></router-outlet>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule,CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  MatButtonModule,\r\n  MatToolbarModule,\r\n  MatIconModule,\r\n  MatBadgeModule,\r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatSelectModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatChipsModule,\r\n  MatTooltipModule,\r\n  MatTableModule,\r\n  MatPaginatorModule,\r\n  MatSnackBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatStepperModule,\r\n  MatMenuModule\r\n} from '@angular/material';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SessionService } from './service/session.service';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { PatientRegisterComponent } from './patient-register/patient-register.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    HomeComponent,\r\n    PatientRegisterComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatSidenavModule,\r\n    MatBadgeModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatChipsModule,\r\n    MatTooltipModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    FlexLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    MatSnackBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatStepperModule,\r\n    MatMenuModule,\r\n    LayoutModule,\r\n  ],\r\n  providers: [\r\n    SessionService,\r\n    MatDatepickerModule\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { SessionService } from '../service/session.service';\r\nimport { Router } from '@angular/router';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent {\r\n\r\n}\r\n","<p>Home works!</p>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { SessionService } from '../service/session.service';\r\nimport { Person } from '../interfaces/person';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\r\n  callRegisterComponent = false;\r\n  loading = false\r\n\r\n  @Input() person: Person = <Person>{};\r\n  @Output() personOut: EventEmitter<Person> = new EventEmitter();\r\n  constructor(private authService: AuthService, private router: Router, private snackbar: MatSnackBar, private sessionService: SessionService) { }\r\n\r\n  ngOnInit() {\r\n    if(this.sessionService.getUserLogged() != null){\r\n      return this.router.navigate(['home']);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.loading = true;\r\n    this.authService.login(this.person.login, this.person.password)\r\n      .subscribe(\r\n        res => {\r\n          this.loading = false;\r\n          this.sessionService.saveUserLoggedId(res.id, res.firstName);\r\n          console.log('successful login!');\r\n          this.personOut.emit(this.person);\r\n          this.router.navigate(['home']);\r\n        }, error => {\r\n          this.loading = false;\r\n          console.log(error);\r\n          this.snackbar.open('Login ou Senha incorreto!', 'Dismiss', {\r\n            duration: 2000,\r\n            panelClass: ['error-snackbar']\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  toRegister() {\r\n    this.router.navigate(['register']);\r\n  }\r\n}\r\n","<div *ngIf=\"callRegisterComponent === false\" class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n        <img mat-card-md-image src=\"../../assets/images/mackIcon/M_vermelho.png\" class=\"logoMRed\" alt=\"Logo isolado do Mackenzie\">\r\n        <mat-card-header>\r\n            <mat-card-title class=\"appNameTitle\">Aplicação CIF</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-header class=\"entrarHeader\">\r\n            <mat-card-title class=\"entrarTitle\">Entrar</mat-card-title>\r\n        </mat-card-header>\r\n\r\n        <form class=\"login-form\" #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-card-content>\r\n                <mat-form-field class=\"login-full-width\">\r\n                    <input matInput placeholder=\"Email ou CPF\" id=\"login\" #login=\"ngModel\" name=\"login\" [(ngModel)]=\"person.login\" required>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"login-full-width\">\r\n                    <input minlength=\"6\" maxlength=\"8\" matInput placeholder=\"Senha\" type=\"password\" id=\"password\" #password=\"ngModel\" name=\"password\" [(ngModel)]=\"person.password\" required>\r\n                </mat-form-field>\r\n            </mat-card-content>\r\n\r\n            <button *ngIf=\"!loading\" [disabled]=\"!loginForm.form.valid\" mat-stroked-button type=\"submit\" color=\"warn\" class=\"btn-block\">Entrar</button>\r\n            <mat-progress-spinner *ngIf=\"loading\" class=\"example-margin\" mode=\"indeterminate\" color=\"warn\"></mat-progress-spinner>\r\n            <button *ngIf=\"!loading\" mat-stroked-button color=\"warn\" (click)=\"toRegister()\" class=\"btn-block register\">Registrar-se</button>\r\n        </form>\r\n    </mat-card>\r\n</div>","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { CepService } from '../service/cep.service';\r\nimport { Router } from '@angular/router';\r\nimport { SessionService } from '../service/session.service';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { RegisterService } from '../service/register.service';\r\nimport { MatSnackBar, DateAdapter, MatStepper } from '@angular/material';\r\nimport { Person } from '../interfaces/person';\r\nimport { Address } from '../interfaces/address';\r\n\r\n@Component({\r\n  selector: 'app-patient-register',\r\n  templateUrl: './patient-register.component.html',\r\n  styleUrls: ['./patient-register.component.css']\r\n})\r\nexport class PatientRegisterComponent implements OnInit {\r\n\r\n  cepNotFound = false;\r\n  equalPass = true;\r\n  loading = false;\r\n  registered = false;\r\n  personForm: FormGroup;\r\n  addressForm: FormGroup;\r\n  states: any = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'TO'];\r\n  Roles: any = ['Admin', 'Paciente', 'Terapeuta'];\r\n\r\n  genders: Gender[] = [\r\n    { value: 'F', viewValue: 'Feminino' },\r\n    { value: 'M', viewValue: 'Masculino' },\r\n    { value: 'O', viewValue: 'Não informar' }\r\n  ];\r\n\r\n  constructor(private cepService: CepService, private router: Router, \r\n    private sessionService: SessionService, private authService: AuthService, \r\n    private registerService: RegisterService, private snackbar: MatSnackBar, \r\n    private _adapter: DateAdapter<any>) {\r\n    this.personForm = this.createPersonForm();\r\n    this.addressForm = this.createAddressForm();\r\n    this._adapter.setLocale('br');\r\n  }\r\n\r\n\r\n  @Input() person: Person = <Person>{};\r\n  @Input() address: Address = <Address>{};\r\n  @ViewChild('cpf') cpfElement: ElementRef;\r\n  @ViewChild('email') emailElement: ElementRef;\r\n  @ViewChild('stepper') private myStepper: MatStepper;\r\n\r\n  searchCEP() {\r\n    this.cepService.searchCEP(this.addressForm.controls.postalCode.value)\r\n      .subscribe(\r\n        (res: any) => {\r\n          if (res.erro == true) {\r\n            this.cepNotFound = true;\r\n            this.snackbar.open('Não foi possível localizar o CEP', 'Dismiss', {\r\n              duration: 2000,\r\n              panelClass: ['error-snackbar']\r\n            });\r\n          } else {\r\n            this.cepNotFound = false;\r\n            this.fillAddressFields(res);\r\n          }\r\n        },\r\n        err => {\r\n          this.snackbar.open('Não foi possível localizar o CEP', 'Dismiss', {\r\n            duration: 2000,\r\n            panelClass: ['error-snackbar']\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  validatePass() {\r\n    this.equalPass = this.personForm.value.password === this.personForm.value.confirmPass;\r\n  }\r\n\r\n  fillAddressFields(cep: any) {\r\n    this.addressForm.controls['publicPlace'].setValue(cep.logradouro);\r\n    this.addressForm.controls['neighborhood'].setValue(cep.bairro);\r\n    this.addressForm.controls['city'].setValue(cep.localidade);\r\n    this.addressForm.controls['state'].setValue(cep.uf);\r\n  }\r\n\r\n  createPersonForm() {\r\n    return new FormGroup({\r\n      'email': new FormControl(this.person.email, [Validators.required, Validators.email]),\r\n      'password': new FormControl(this.person.password, [Validators.required, Validators.minLength(6), Validators.maxLength(8)]),\r\n      'confirmPass': new FormControl(this.person.password, [Validators.required, Validators.minLength(6), Validators.maxLength(8)]),\r\n      'firstName': new FormControl(this.person.firstName, [Validators.required]),\r\n      'lastName': new FormControl(this.person.lastName, [Validators.required]),\r\n      'cpf': new FormControl(this.person.lastName, [Validators.required, Validators.pattern('[0-9]{3}\\.?[0-9]{3}\\.?[0-9]{3}\\-?[0-9]{2}')]),\r\n      'sex': new FormControl(this.person.sex, [Validators.required]),\r\n      'telephoneNumber': new FormControl(this.person.telephoneNumber, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),\r\n      'birthDate': new FormControl(this.person.birthDate, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  createAddressForm() {\r\n    return new FormGroup({\r\n      'publicPlace': new FormControl(this.address.publicPlace, [Validators.required]),\r\n      'houseNumber': new FormControl(this.address.houseNumber, [Validators.required]),\r\n      'neighborhood': new FormControl(this.address.neighborhood, [Validators.required]),\r\n      'city': new FormControl(this.address.city, [Validators.required]),\r\n      'state': new FormControl(this.address.state, [Validators.required]),\r\n      'postalCode': new FormControl(this.address.postalCode, [Validators.required, Validators.minLength(8), Validators.maxLength(8)])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  goBack2Login(){\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.person = this.personForm.value;\r\n    this.address = this.addressForm.value;\r\n    this.person.address = this.address;\r\n    this.person.active = true;\r\n    this.person.patient.therapistID = this.sessionService.getUserLogged();\r\n    this.person.birthDate = new Date(this.person.birthDate).toISOString();\r\n    // this.registerService.register(this.person)\r\n    //   .subscribe(\r\n    //     (res: any) => {\r\n    //       this.snackbar.open('Paciente Cadastrado \\nCom sucesso!', 'Accept', {\r\n    //         duration: 2000,\r\n    //         panelClass: ['green-snackbar']\r\n    //       });\r\n    //     },\r\n    //     (erro: any) => {\r\n    //       console.log(erro);\r\n    //       if(erro.message === \"EMAIL_ALREADY_REGISTERED\"){\r\n    //         this.myStepper.previous();\r\n    //         this.snackbar.open('Email já cadastrado!', 'dismiss', {\r\n    //           duration: 4000,\r\n    //           panelClass: ['red-snackbar']\r\n    //         });\r\n    //       }\r\n    //       if(erro.message === \"CPF_ALREADY_REGISTERED\"){\r\n    //         this.myStepper.previous();\r\n    //         this.snackbar.open('Cpf já cadastrado!', 'dismiss', {\r\n    //           duration: 4000,\r\n    //           panelClass: ['red-snackbar']\r\n    //         });\r\n    //       }\r\n    //     }\r\n    //   )\r\n    }\r\n}\r\n\r\ninterface Gender {\r\n  value: string;\r\n  viewValue: string;\r\n}","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n        <mat-card-header>\r\n            <mat-card-title>Cadastro de Paciente</mat-card-title>\r\n        </mat-card-header>\r\n\r\n        <mat-horizontal-stepper linear=\"true\" #stepper>\r\n            <mat-step [stepControl]=\"personForm\">\r\n                <form [formGroup]=\"personForm\">\r\n                    <ng-template matStepLabel>Dados Pessoais</ng-template>\r\n                    <mat-form-field>\r\n                        <mat-label>Nome</mat-label>\r\n                        <input matInput placeholder=\"Nome\" formControlName=\"firstName\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Sobrenome</mat-label>\r\n                        <input matInput placeholder=\"Sobrenome\" formControlName=\"lastName\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>CPF</mat-label>\r\n                        <input matInput placeholder=\"CPF\" #cpf formControlName=\"cpf\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Email</mat-label>\r\n                        <input matInput placeholder=\"Email\" #email type=\"email\" formControlName=\"email\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Senha</mat-label>\r\n                        <input matInput placeholder=\"Senha\" type=\"password\" formControlName=\"password\" required>\r\n                        <div *ngIf=\"!equalPass\">\r\n                            <p class=\"cepNF\">Senhas não correspondem!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Confirmar Senha</mat-label>\r\n                        <input matInput placeholder=\"Senha\" (change)=\"validatePass()\" type=\"password\" formControlName=\"confirmPass\" required>\r\n                        <div *ngIf=\"!equalPass\">\r\n                            <p class=\"cepNF\">Senhas não correspondem!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Celular</mat-label>\r\n                        <input matInput placeholder=\"Celular\" formControlName=\"telephoneNumber\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Gênero</mat-label>\r\n                        <mat-select formControlName=\"sex\">\r\n                            <mat-option *ngFor=\"let gender of genders\" [value]=\"gender.value\">\r\n                                {{gender.viewValue}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Data de Nascimento</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" required formControlName=\"birthDate\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n                    <div class=\"nextStep\">\r\n                        <button mat-button mat-button (click)=\"goBack2Login()\" mat-stroked-button type=\"submit\" color=\"warn\" class=\"btn-block btn-cancel\">\r\n                            <mat-icon>remove_circle_outline</mat-icon>\r\n                            Cancelar\r\n                            <mat-icon>remove_circle_outline</mat-icon>\r\n                        </button>\r\n                        <span class=\"spacer\"></span>\r\n                        <button mat-button mat-button matStepperNext mat-stroked-button type=\"submit\" color=\"warn\" class=\"btn-block\">\r\n                            <mat-icon>double_arrow</mat-icon>\r\n                            Próximo\r\n                            <mat-icon>double_arrow</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </mat-step>\r\n            <mat-step [stepControl]=\"addressForm\">\r\n                <form [formGroup]=\"addressForm\" (ngSubmit)=\"onSubmit()\">\r\n                    <ng-template matStepLabel>Dados Residênciais</ng-template>\r\n                    <mat-form-field>\r\n                        <mat-label>CEP</mat-label>\r\n                        <input matInput placeholder=\"CEP\" (change)=\"searchCEP()\" formControlName=\"postalCode\" required>\r\n                        <div *ngIf=\"cepNotFound\">\r\n                            <p class=\"cepNF\">CEP não encontrado!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Rua</mat-label>\r\n                        <input matInput placeholder=\"Rua\" formControlName=\"publicPlace\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Número</mat-label>\r\n                        <input matInput placeholder=\"Senha\" formControlName=\"houseNumber\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Bairro</mat-label>\r\n                        <input matInput placeholder=\"Nome\" formControlName=\"neighborhood\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Cidade</mat-label>\r\n                        <input matInput placeholder=\"Sobrenome\" formControlName=\"city\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Estado</mat-label>\r\n                        <mat-select formControlName=\"state\">\r\n                            <mat-option *ngFor=\"let state of states\" [value]=\"state\">\r\n                                {{state}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                    <div class=\"nextStep\">\r\n                        <button *ngIf=\"!loading\" mat-button (click)=\"stepper.reset()\" mat-stroked-button color=\"warn\" class=\"btn-block\">\r\n                            <mat-icon>clear_all</mat-icon>\r\n                            Limpar\r\n                            <mat-icon>clear_all</mat-icon>\r\n                        </button>\r\n                        <button *ngIf=\"!loading\" mat-button matStepperNext mat-stroked-button type=\"submit\" color=\"primary\" class=\"btn-block\">\r\n                            <mat-icon>done_all</mat-icon>\r\n                            Concluir\r\n                            <mat-icon>done_all</mat-icon>\r\n                        </button>\r\n                        <mat-progress-spinner *ngIf=\"loading\" class=\"example-margin\" mode=\"indeterminate\" color=\"warn\"></mat-progress-spinner>\r\n                    </div>\r\n                </form>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </mat-card>\r\n</div>","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { Person } from '../interfaces/person';\r\nimport { Address } from '../interfaces/address';\r\nimport { CepService } from '../service/cep.service';\r\nimport { MatSnackBar, MatStepper } from '@angular/material';\r\nimport { DateAdapter } from '@angular/material/core';\r\nimport { RegisterService } from '../service/register.service';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { SessionService } from '../service/session.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  cepNotFound = false;\r\n  equalPass = true;\r\n  loading = false;\r\n  registered = false;\r\n  personForm: FormGroup;\r\n  addressForm: FormGroup;\r\n  states: any = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'TO'];\r\n  Roles: any = ['Admin', 'Paciente', 'Terapeuta'];\r\n\r\n  genders: Gender[] = [\r\n    { value: 'F', viewValue: 'Feminino' },\r\n    { value: 'M', viewValue: 'Masculino' },\r\n    { value: 'O', viewValue: 'Não informar' }\r\n  ];\r\n\r\n  constructor(private cepService: CepService, private router: Router, \r\n    private sessionService: SessionService, private authService: AuthService, \r\n    private registerService: RegisterService, private snackbar: MatSnackBar, \r\n    private _adapter: DateAdapter<any>) {\r\n    this.personForm = this.createPersonForm();\r\n    this.addressForm = this.createAddressForm();\r\n    this._adapter.setLocale('br');\r\n  }\r\n\r\n\r\n  @Input() person: Person = <Person>{};\r\n  @Input() address: Address = <Address>{};\r\n  @ViewChild('cpf') cpfElement: ElementRef;\r\n  @ViewChild('email') emailElement: ElementRef;\r\n  @ViewChild('stepper') private myStepper: MatStepper;\r\n\r\n  searchCEP() {\r\n    this.cepService.searchCEP(this.addressForm.controls.postalCode.value)\r\n      .subscribe(\r\n        (res: any) => {\r\n          if (res.erro == true) {\r\n            this.cepNotFound = true;\r\n            this.snackbar.open('Não foi possível localizar o CEP', 'Dismiss', {\r\n              duration: 2000,\r\n              panelClass: ['error-snackbar']\r\n            });\r\n          } else {\r\n            this.cepNotFound = false;\r\n            this.fillAddressFields(res);\r\n          }\r\n        },\r\n        err => {\r\n          this.snackbar.open('Não foi possível localizar o CEP', 'Dismiss', {\r\n            duration: 2000,\r\n            panelClass: ['error-snackbar']\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  validatePass() {\r\n    this.equalPass = this.personForm.value.password === this.personForm.value.confirmPass;\r\n  }\r\n\r\n  fillAddressFields(cep: any) {\r\n    this.addressForm.controls['publicPlace'].setValue(cep.logradouro);\r\n    this.addressForm.controls['neighborhood'].setValue(cep.bairro);\r\n    this.addressForm.controls['city'].setValue(cep.localidade);\r\n    this.addressForm.controls['state'].setValue(cep.uf);\r\n  }\r\n\r\n  createPersonForm() {\r\n    return new FormGroup({\r\n      'email': new FormControl(this.person.email, [Validators.required, Validators.email]),\r\n      'password': new FormControl(this.person.password, [Validators.required, Validators.minLength(6), Validators.maxLength(8)]),\r\n      'confirmPass': new FormControl(this.person.password, [Validators.required, Validators.minLength(6), Validators.maxLength(8)]),\r\n      'firstName': new FormControl(this.person.firstName, [Validators.required]),\r\n      'lastName': new FormControl(this.person.lastName, [Validators.required]),\r\n      'cpf': new FormControl(this.person.lastName, [Validators.required, Validators.pattern('[0-9]{3}\\.?[0-9]{3}\\.?[0-9]{3}\\-?[0-9]{2}')]),\r\n      'sex': new FormControl(this.person.sex, [Validators.required]),\r\n      'telephoneNumber': new FormControl(this.person.telephoneNumber, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),\r\n      'birthDate': new FormControl(this.person.birthDate, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  createAddressForm() {\r\n    return new FormGroup({\r\n      'publicPlace': new FormControl(this.address.publicPlace, [Validators.required]),\r\n      'houseNumber': new FormControl(this.address.houseNumber, [Validators.required]),\r\n      'neighborhood': new FormControl(this.address.neighborhood, [Validators.required]),\r\n      'city': new FormControl(this.address.city, [Validators.required]),\r\n      'state': new FormControl(this.address.state, [Validators.required]),\r\n      'postalCode': new FormControl(this.address.postalCode, [Validators.required, Validators.minLength(8), Validators.maxLength(8)])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log('TO AQUI')\r\n    if(this.sessionService.getUserLogged() != null){\r\n      return this.router.navigate(['home']);\r\n    }\r\n  }\r\n\r\n  goBack2Login(){\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.person = this.personForm.value;\r\n    this.address = this.addressForm.value;\r\n    this.person.address = this.address;\r\n    this.person.active = true;\r\n    this.person.birthDate = new Date(this.person.birthDate).toISOString();\r\n    this.registerService.register(this.person)\r\n      .subscribe(\r\n        (res: any) => {\r\n          this.snackbar.open('Cadastro realizado com sucesso!', 'Accept', {\r\n            duration: 2000,\r\n            panelClass: ['green-snackbar']\r\n          });\r\n          this.login(this.person.cpf, this.person.password);\r\n        },\r\n        (erro: any) => {\r\n          console.log(erro);\r\n          if(erro.message === \"EMAIL_ALREADY_REGISTERED\"){\r\n            this.myStepper.previous();\r\n            this.snackbar.open('Email já cadastrado!', 'dismiss', {\r\n              duration: 4000,\r\n              panelClass: ['red-snackbar']\r\n            });\r\n          }\r\n          if(erro.message === \"CPF_ALREADY_REGISTERED\"){\r\n            this.myStepper.previous();\r\n            this.snackbar.open('Cpf já cadastrado!', 'dismiss', {\r\n              duration: 4000,\r\n              panelClass: ['red-snackbar']\r\n            });\r\n          }\r\n        }\r\n      )\r\n    }\r\n    \r\n  private login(login:string, password:string){\r\n    console.log('tentando fazer login');\r\n    this.authService.login(login, password)\r\n      .subscribe(\r\n        resp => {\r\n          this.loading = false;\r\n          this.sessionService.saveUserLoggedId(resp.id)\r\n          console.log('successful login!');\r\n          this.router.navigate(['home']);\r\n        }, error => {\r\n          this.loading = false;\r\n          console.log(error);\r\n          this.snackbar.open('Não foi possivel realizar o login', 'Dismiss', {\r\n            duration: 2000,\r\n            panelClass: ['red-snackbar']\r\n          });\r\n          this.router.navigate(['']);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\ninterface Gender {\r\n  value: string;\r\n  viewValue: string;\r\n}","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n        <mat-card-header>\r\n            <mat-card-title>Cadastro Aplicação CIF</mat-card-title>\r\n        </mat-card-header>\r\n\r\n        <mat-horizontal-stepper linear=\"true\" #stepper>\r\n            <mat-step [stepControl]=\"personForm\">\r\n                <form [formGroup]=\"personForm\">\r\n                    <ng-template matStepLabel>Dados Pessoais</ng-template>\r\n                    <mat-form-field>\r\n                        <mat-label>Nome</mat-label>\r\n                        <input matInput placeholder=\"Nome\" formControlName=\"firstName\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Sobrenome</mat-label>\r\n                        <input matInput placeholder=\"Sobrenome\" formControlName=\"lastName\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>CPF</mat-label>\r\n                        <input matInput placeholder=\"CPF\" #cpf formControlName=\"cpf\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Email</mat-label>\r\n                        <input matInput placeholder=\"Email\" #email type=\"email\" formControlName=\"email\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Senha</mat-label>\r\n                        <input matInput placeholder=\"Senha\" type=\"password\" formControlName=\"password\" required>\r\n                        <div *ngIf=\"!equalPass\">\r\n                            <p class=\"cepNF\">Senhas não correspondem!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Confirmar Senha</mat-label>\r\n                        <input matInput placeholder=\"Senha\" (change)=\"validatePass()\" type=\"password\" formControlName=\"confirmPass\" required>\r\n                        <div *ngIf=\"!equalPass\">\r\n                            <p class=\"cepNF\">Senhas não correspondem!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Celular</mat-label>\r\n                        <input matInput placeholder=\"Celular\" formControlName=\"telephoneNumber\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Gênero</mat-label>\r\n                        <mat-select formControlName=\"sex\">\r\n                            <mat-option *ngFor=\"let gender of genders\" [value]=\"gender.value\">\r\n                                {{gender.viewValue}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Data de Nascimento</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" required formControlName=\"birthDate\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n                    <div class=\"nextStep\">\r\n                        <button mat-button mat-button (click)=\"goBack2Login()\" mat-stroked-button type=\"submit\" color=\"warn\" class=\"btn-block btn-cancel\">\r\n                            <mat-icon>remove_circle_outline</mat-icon>\r\n                            Cancelar\r\n                            <mat-icon>remove_circle_outline</mat-icon>\r\n                        </button>\r\n                        <span class=\"spacer\"></span>\r\n                        <button mat-button mat-button matStepperNext mat-stroked-button type=\"submit\" color=\"warn\" class=\"btn-block\">\r\n                            <mat-icon>double_arrow</mat-icon>\r\n                            Próximo\r\n                            <mat-icon>double_arrow</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </mat-step>\r\n            <mat-step [stepControl]=\"addressForm\">\r\n                <form [formGroup]=\"addressForm\" (ngSubmit)=\"onSubmit()\">\r\n                    <ng-template matStepLabel>Dados Residênciais</ng-template>\r\n                    <mat-form-field>\r\n                        <mat-label>CEP</mat-label>\r\n                        <input matInput placeholder=\"CEP\" (change)=\"searchCEP()\" formControlName=\"postalCode\" required>\r\n                        <div *ngIf=\"cepNotFound\">\r\n                            <p class=\"cepNF\">CEP não encontrado!</p>\r\n                        </div>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Rua</mat-label>\r\n                        <input matInput placeholder=\"Rua\" formControlName=\"publicPlace\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Número</mat-label>\r\n                        <input matInput placeholder=\"Senha\" formControlName=\"houseNumber\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Bairro</mat-label>\r\n                        <input matInput placeholder=\"Nome\" formControlName=\"neighborhood\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <mat-label>Cidade</mat-label>\r\n                        <input matInput placeholder=\"Sobrenome\" formControlName=\"city\" required>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Estado</mat-label>\r\n                        <mat-select formControlName=\"state\">\r\n                            <mat-option *ngFor=\"let state of states\" [value]=\"state\">\r\n                                {{state}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                    <div class=\"nextStep\">\r\n                        <button *ngIf=\"!loading\" mat-button (click)=\"stepper.reset()\" mat-stroked-button color=\"warn\" class=\"btn-block\">\r\n                            <mat-icon>clear_all</mat-icon>\r\n                            Limpar\r\n                            <mat-icon>clear_all</mat-icon>\r\n                        </button>\r\n                        <button *ngIf=\"!loading\" mat-button matStepperNext mat-stroked-button type=\"submit\" color=\"primary\" class=\"btn-block\">\r\n                            <mat-icon>done_all</mat-icon>\r\n                            Concluir\r\n                            <mat-icon>done_all</mat-icon>\r\n                        </button>\r\n                        <mat-progress-spinner *ngIf=\"loading\" class=\"example-margin\" mode=\"indeterminate\" color=\"warn\"></mat-progress-spinner>\r\n                    </div>\r\n                </form>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </mat-card>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders,HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Person } from '../interfaces/person';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(login: string, password: string) : Observable<any> {\r\n    const url = `${environment.personBaseUrl}/v1/person/login`;\r\n\r\n    let headers = new HttpHeaders();\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'my-auth-token',\r\n        'userLogin': login,\r\n        'password': password\r\n      })\r\n    };\r\n    return this.http.get<Person>(url, httpOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders,HttpParams } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CepService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  searchCEP(cep:string){\r\n    const url = `${environment.cepBaseUrl}/ws/${cep}/json/`;\r\n    return this.http.get(url);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Person } from '../interfaces/person';\r\nimport { Observable,throwError  } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  register(person: Person): Observable<Person> {\r\n    const url = `${environment.personBaseUrl}/v1/person/register`;\r\n    return this.http.post<Person>(url,person)\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError({\r\n      status: error.status,\r\n      message: error.error \r\n    });\r\n  };\r\n}\r\n\r\n","import { Injectable, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class SessionService {\r\n  public userId: string;\r\n  public name: string;\r\n\r\n  constructor(private route: Router) { }\r\n\r\n  getUserLogged() {\r\n    const userId = localStorage.getItem('user');\r\n    if (!this.userId) {\r\n      this.userId = userId;\r\n    }\r\n    return this.userId;\r\n  }\r\n\r\n  saveUserLoggedId(userId: string, name?: string) {\r\n    localStorage.setItem('user', userId);\r\n    if(name != null){\r\n      this.name = name;\r\n      localStorage.setItem('name', name);\r\n    }\r\n    this.userId = userId;\r\n  }\r\n\r\n  logoutUser() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('name');\r\n    this.userId = '';\r\n    this.name = '';\r\n    this.route.navigate(['']);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  personBaseUrl: 'https://java-cif-person-api.herokuapp.com',\r\n  cepBaseUrl: 'https://viacep.com.br'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}